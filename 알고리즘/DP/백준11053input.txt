6
10 30 10 20 20 10

9
2 8 3 10 5 1 5 2 3
Answer: 3 Output: 4

10
7 10 8 10 1 2 9 9 1 10
Answer: 4 Output: 5







7
7 9 10 8 2 3 7
Answer: 3 Output: 4

10
4 7 10 3 1 8 7 2 5 7
Answer: 4 Output: 5

8
10 20 30 5 10 20 30 40

6
10 20 10 30 20 50




9
2 8 3 10 5 1 5 2 3
Answer: 3 Output: 4
10
10 6 5 9 10 9 3 4 7 1
Answer: 3 Output: 4
10
5 8 10 3 9 1 5 8 5 6
Answer: 3 Output: 4
9
3 2 8 2 10 1 2 2 3
Answer: 3 Output: 4
10
3 8 10 1 5 7 9 8 9 6
Answer: 5 Output: 6
7
4 3 4 9 1 3 7
Answer: 3 Output: 4
10
8 6 8 9 5 1 4 4 6 3
Answer: 3 Output: 4





const readline = require("readline");
const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout,
});

function binarySearch(result, input, i) {
    let left = 0;
    let right = result.length - 1;

    while (left < right) {
        const mid = parseInt((left + right) / 2);
        if (result[mid] < input[1][i]) {
            left = mid + 1;
        } else if (result[mid] > input[1][i]) {
            right = mid;
        } else {
            return mid;
        }
    }
    return right;
}
const input = [];
let count = 2;

rl.on("line", function (line) {
    input.push(line.split(" ").map((v) => parseInt(v)));
    count--;
    if (count === 0) rl.close();
}).on("close", function () {
    const n = input[0];
    const result = [input[1][0]];

    for (let i = 1; i < n; i++) {
        if (result[result.length - 1] < input[1][i]) {
            result.push(input[1][i]);
            continue;
        }

        const idx = binarySearch(result, input, i);
        result[idx] = input[1][i];
    }
    
    console.log(result.length);
    process.exit();
});